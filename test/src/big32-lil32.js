import test from 'ava';

import {list} from '@iterable-iterator/list';
import {reversed} from '@iterable-iterator/reversed';
import {big32, lil32, get32} from '../../src/index.js';

function macro(t, a, o, e) {
	const expected = get32(e);

	const b = list(reversed(a));

	const p = b.length - o - 4;

	t.deepEqual(big32(a, o), expected, 'big32');
	t.deepEqual(lil32(b, p), expected, 'lil32');
}

macro.title = (providedTitle, a, o, expected) =>
	`${providedTitle} big32(${a}, ${o}) === ${expected}`.trim();

test(macro, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], 0, 0x00_00_00_00);
test(macro, [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], 0, 0xff_00_00_00);
test(macro, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00], 0, 0xff_ff_ff_ff);
test(macro, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff], 0, 0xff_ff_ff_ff);
test(macro, [0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00], 0, 0x00_00_ff_00);
test(macro, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], 0, 0x00_00_00_00);
test(macro, [0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00], 0, 0x00_00_00_a0);
test(
	macro,
	[0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0c],
	1,
	0x00_00_a0_00,
);

test(macro, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], 4, 0x00_00_00_00);
test(macro, [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], 4, 0x00_00_00_00);
test(macro, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00], 4, 0xff_ff_ff_00);
test(macro, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff], 4, 0xff_ff_ff_ff);
test(macro, [0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00], 4, 0x00_00_00_00);
test(macro, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], 4, 0x00_00_01_00);
test(macro, [0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00], 4, 0x00_00_00_00);
test(
	macro,
	[0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0c],
	5,
	0x00_00_00_03,
);
