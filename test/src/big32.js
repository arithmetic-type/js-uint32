import test from 'ava';

import { big32 , get32 } from '../../src' ;

function macro (t, a, o, expected) {
	expected = get32(expected);
	t.deepEqual(big32(a, o), expected);
}

macro.title = (providedTitle, a, o, expected) => `${providedTitle} big32(${a}, ${o}) === ${expected}`.trim();

test(macro, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], 0, 0x00000000);
test(macro, [0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], 0, 0xFF000000);
test(macro, [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00], 0, 0xFFFFFFFF);
test(macro, [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF], 0, 0xFFFFFFFF);
test(macro, [0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00], 0, 0x0000FF00);
test(macro, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], 0, 0x00000000);
test(macro, [0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00], 0, 0x000000A0);
test(macro, [0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0C], 1, 0x0000A000);

test(macro, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], 4, 0x00000000);
test(macro, [0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], 4, 0x00000000);
test(macro, [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00], 4, 0xFFFFFF00);
test(macro, [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF], 4, 0xFFFFFFFF);
test(macro, [0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00], 4, 0x00000000);
test(macro, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], 4, 0x00000100);
test(macro, [0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00], 4, 0x00000000);
test(macro, [0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0C], 5, 0x00000003);
